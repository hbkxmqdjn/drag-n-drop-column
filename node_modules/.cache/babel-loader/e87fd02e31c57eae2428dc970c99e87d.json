{"ast":null,"code":"var _jsxFileName = \"/Users/dingjunning/Documents/GitHub/drag-n-drop-column/src/App.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\nconst Container = styled.div`\n  display: flex;\n`;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialData;\n\n    this.onDragStart = start => {\n      const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n      this.setState({\n        homeIndex\n      });\n    };\n\n    this.onDragEnd = result => {\n      this.setState({\n        homeIndex: null\n      });\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const home = this.state.columns[source.droppableId];\n      const foreign = this.state.columns[destination.droppableId];\n\n      if (home === foreign) {\n        const newTaskIds = Array.from(home.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newHome = { ...home,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newHome.id]: newHome\n          }\n        };\n        this.setState(newState);\n        return;\n      } // moving from one list to another\n\n\n      const homeTaskIds = Array.from(home.taskIds);\n      homeTaskIds.splice(source.index, 1);\n      const newHome = { ...home,\n        taskIds: homeTaskIds\n      };\n      const foreignTaskIds = Array.from(foreign.taskIds);\n      foreignTaskIds.splice(destination.index, 0, draggableId);\n      const newForeign = { ...foreign,\n        taskIds: foreignTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newHome.id]: newHome,\n          [newForeign.id]: newForeign\n        }\n      };\n      this.setState(newState);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragStart: this.onDragStart,\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, this.state.columnOrder.map((columnId, index) => {\n      const column = this.state.columns[columnId];\n      const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n      const isDropDisabled = index < this.state.homeIndex;\n      return /*#__PURE__*/React.createElement(Column, {\n        key: column.id,\n        column: column,\n        tasks: tasks,\n        isDropDisabled: isDropDisabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }\n      });\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dingjunning/Documents/GitHub/drag-n-drop-column/src/App.js"],"names":["React","ReactDOM","styled","DragDropContext","initialData","Column","Container","div","App","Component","state","onDragStart","start","homeIndex","columnOrder","indexOf","source","droppableId","setState","onDragEnd","result","destination","draggableId","index","home","columns","foreign","newTaskIds","Array","from","taskIds","splice","newHome","newState","id","homeTaskIds","foreignTaskIds","newForeign","render","map","columnId","column","tasks","taskId","isDropDisabled"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nclass App extends React.Component {\n  state = initialData;\n\n  onDragStart = start => {\n    const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n\n    this.setState({\n      homeIndex,\n    });\n  };\n\n  onDragEnd = result => {\n    this.setState({\n      homeIndex: null,\n    });\n\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const home = this.state.columns[source.droppableId];\n    const foreign = this.state.columns[destination.droppableId];\n\n    if (home === foreign) {\n      const newTaskIds = Array.from(home.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newHome = {\n        ...home,\n        taskIds: newTaskIds,\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newHome.id]: newHome,\n        },\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    // moving from one list to another\n    const homeTaskIds = Array.from(home.taskIds);\n    homeTaskIds.splice(source.index, 1);\n    const newHome = {\n      ...home,\n      taskIds: homeTaskIds,\n    };\n\n    const foreignTaskIds = Array.from(foreign.taskIds);\n    foreignTaskIds.splice(destination.index, 0, draggableId);\n    const newForeign = {\n      ...foreign,\n      taskIds: foreignTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newHome.id]: newHome,\n        [newForeign.id]: newForeign,\n      },\n    };\n    this.setState(newState);\n  };\n\n  render() {\n    return (\n      <DragDropContext\n        onDragStart={this.onDragStart}\n        onDragEnd={this.onDragEnd}\n      >\n        <Container>\n          {this.state.columnOrder.map((columnId, index) => {\n            const column = this.state.columns[columnId];\n            const tasks = column.taskIds.map(\n              taskId => this.state.tasks[taskId],\n            );\n\n            const isDropDisabled = index < this.state.homeIndex;\n\n            return (\n              <Column\n                key={column.id}\n                column={column}\n                tasks={tasks}\n                isDropDisabled={isDropDisabled}\n              />\n            );\n          })}\n        </Container>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}