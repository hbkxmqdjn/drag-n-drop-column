{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fixed","id","name","columnsFromBackend","items","concat","checkDisable","item","i","length","App","props","saveData","event","baseState","state","console","log","resetData","setState","onDoubleClick","target","innerHTML","newFixed","toLowerCase","index","prev","list","splice","push","onDragEnd","result","destination","source","droppableId","sourceColumn","columns","destColumn","sourceItems","destItems","removed","column","copiedItems","style","background","display","height","color","paddingTop","paddingLeft","padding","Object","entries","this","map","columnId","flexDirection","key","marginTop","provided","droppableProps","ref","innerRef","width","borderStyle","borderWidth","draggableId","isDragDisabled","snapshot","draggableProps","dragHandleProps","userSelect","margin","minHeight","backgroundColor","isDragging","float","placeholder","Button","variant","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92a05f8b.chunk.js","sourcesContent":["import React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Button } from 'react-bootstrap';\nimport { BsList,BsLockFill } from 'react-icons/bs';\n\nconst available = [\n  { id: \"start time\", name: \"Start Time\" },\n  { id: \"stop time\", name: \"Stop Time\" },\n  { id: \"per point\", name: \"Per Point\" },\n  { id: \"initial margin\" , name: \"Initial Margin\" },\n];\n\nconst visible = [\n  { id: \"change %\", name: \"Change %\"},\n  { id: \"change\", name: \"Change\"},\n  { id: \"last\", name: \"Last\" },\n  { id: \"last volume\", name: \"Last Volume\" },\n];\n\nconst fixed = [\n  { id: \"symbol &amp; description\", name: \"Symbol & Description\"},\n];\n\nconst columnsFromBackend = {\n  \"available\": {\n    name: \"Available\",\n    items: available\n  },\n  \"visible\": {\n    name: \"Visible\",\n    items: fixed.concat(visible)\n  },\n};\n\nconst checkDisable=(item)=>{\n  for(let i=0;i<fixed.length;i++){\n    if(fixed[i].id===item.id){\n      return true;\n    }\n  }\n  return false;\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      columns: columnsFromBackend,\n      fixed: fixed,\n    }\n    this.baseState = this.state;\n  }\n\n  //save data when click on save\n  saveData=(event)=>{\n    this.baseState = this.state;\n    //currently only log the state to console.\n    console.log(this.state);\n  }\n\n  //reset all moved when click on cancel\n  resetData=()=>{\n    this.setState(this.baseState);\n  }\n\n  //Double click event\n  onDoubleClick=(event)=>{\n    const name = event.target.innerHTML;\n    const id = name.toLowerCase();\n    const newFixed = {id:id,name:name};\n    console.log(newFixed)\n    let index = -1;\n    for(let i=0;i<this.state.fixed.length;i++){\n      if(this.state.fixed[i].id===newFixed.id){\n        index = i;\n        this.setState(prev=>{\n          const list = prev.fixed.splice(index,1);\n          return{\n            list\n          }\n        });\n        break;\n      }\n    }\n    if(index===-1){\n      this.setState(prev=>{\n        const list = prev.fixed.push(newFixed);\n        return{\n          list\n        }\n      });\n    }   \n  }\n\n  //Drag event\n  onDragEnd = (result) => {\n    if (!result.destination) return;\n    const { source, destination } = result;\n    if (source.droppableId !== destination.droppableId) {\n      this.setState(prev=>{\n        let sourceColumn = prev.columns[source.droppableId];\n        let destColumn = prev.columns[destination.droppableId];\n        let sourceItems = [...sourceColumn.items];\n        let destItems = [...destColumn.items];\n        let [removed] = sourceItems.splice(source.index, 1);\n        destItems.splice(destination.index, 0, removed);\n        return{\n          columns:{\n            ...prev.columns,\n            [source.droppableId]: {\n              ...sourceColumn,\n              items: sourceItems\n            },\n            [destination.droppableId]: {\n              ...destColumn,\n              items: destItems\n            }\n          }\n        }\n      });\n    } else {\n      this.setState(prev=>{   \n        let column = prev.columns[source.droppableId];\n        let copiedItems = [...column.items];\n        let [removed] = copiedItems.splice(source.index, 1);\n        copiedItems.splice(destination.index, 0, removed);\n        console.log(prev.columns)\n        console.log(copiedItems);\n        console.log(column);\n        return{\n          columns:{\n            ...prev.columns,\n            [source.droppableId]: {\n              ...column,\n              items: copiedItems\n            }\n          }\n        }\n      },()=>{\n        \n      });\n    }\n  };\n\n  render(){\n    return (\n      <div>\n        <div style={{ background:\"#000000\", display:\"flex\", height: \"100%\", color:\"#ffffff\", paddingTop:\"20px\", paddingLeft:\"20px\"}}>\n          <h5>Configure Data Fields</h5>\n        </div>\n        <div style={{ background:\"#000000\", display:\"flex\", height: \"100%\", color:\"#9da4ab\",paddingLeft:\"20px\"}}>\n          <span>Drag & Drop between columns to configure visible data.</span>\n        </div>\n        <div style={{ background:\"#000000\",display: \"flex\", height: \"100%\", padding:\"20px\" }}>\n          <DragDropContext style={{color:\"white\"}} onDragEnd={result => this.onDragEnd(result)}>\n            {Object.entries(this.state.columns).map(([columnId, column]) => {\n              return (   \n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    \n                  }}\n                  key={columnId}\n                  onDoubleClick={event=>this.onDoubleClick(event)}\n                >\n                  <p style={{color:'#9da4ab',paddingLeft:\"15px\",marginTop:\"20px\"}}>{column.name}</p>\n                  <div>\n                    <Droppable droppableId={columnId} key={columnId} >\n                      {(provided) => {\n                        return (\n                          <div\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                            style={{\n                              background: \"#000000\",\n                              padding: 3,\n                              width: 300,\n                              borderStyle: column.name===\"Available\"\n                                ? \"none none none none\"\n                                : \"none none none dashed\",\n                              borderWidth:\"3px\",\n                            }}\n                          >\n                            {column.items.map((item, index) => {\n                              return (\n                                <Draggable\n                                  key={item.id}\n                                  draggableId={item.id}\n                                  index={index}\n                                  isDragDisabled={checkDisable(item)}\n                                >\n                                  {(provided, snapshot) => {\n                                    return (\n                                      <div\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                        style={{                                     \n                                          userSelect: \"none\",\n                                          padding: 5,\n                                          margin: \"0 0 5px 5px\",\n                                          minHeight: \"20px\",\n                                          backgroundColor: snapshot.isDragging\n                                            ? \"#252930\"\n                                            : \"#000000\",\n                                          color: checkDisable(item)\n                                            ? \"#9da4ab\"\n                                            : \"#ffffff\",\n                                          ...provided.draggableProps.style\n                                        }}\n                                      >\n                                        <div>\n                                          <div style={{padding:\"10px\",float:\"left\"}}>\n                                            <BsLockFill style={{\n                                              display: checkDisable(item)\n                                              ? \"block\"\n                                              : \"none\",\n                                              }}\n                                            />\n                                            <BsList style={{\n                                              display: checkDisable(item)\n                                              ? \"none\"\n                                              : \"block\",\n                                              }}\n                                            />\n                                          </div>\n                                          <div style={{padding:\"7px\"}}>\n                                            {item.name}\n                                          </div>\n                                        </div>\n                                      </div>\n                                    );\n                                  }}\n                                </Draggable>\n                              );\n                            })}\n                            {provided.placeholder}\n                          </div>\n                        );\n                      }}\n                    </Droppable>\n                  </div>\n                </div>\n              );\n            })}\n          </DragDropContext>\n        </div>\n        <div style={{background:\"#000000\" , height:\"1000px\", padding:\"20px\"}}>\n          <Button style={{margin:\"10px\", width:\"90px\"}} variant=\"info\" onClick={event=>this.saveData(event)}>Save</Button>\n          <Button style={{margin:\"10px\", width:\"90px\"}} variant=\"secondary\" onClick={event=>this.resetData(event)}>Cancel</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}